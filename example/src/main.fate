use std::alloc;
use std::io::puts;
use std::io::Display;
use std::io::Writer;

static COUNT: [u8; 10] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

enum Option<T> {
    Some(T),
    None,

    pub fn is_some(*self): bool {
        // match (*self) {
        //     Option::Some: return true;
        //     Option::None: return false;
        // }
    }

    pub fn is_none(*self): bool {
        return !self.is_some();
    }

    pub fn map<R>(self, op: fn(T): R): Option<R> {
        // match (self) {
        //     Some: return Some(op(param));
        //     None: return None;
        // }
    }
}

fn main(): void {
    let string: str = "hello";

    let foobar: FooBar = FooBar::Baz(0, 132);
    // let bytes: [u8; 5] = [0, 1, 2, 3, 4];
    // match foobar {
    //     Foo => puts("foo"),
    //     Bar {foo, bar} => puts("bar"),
    //     Baz<foo> => puts("baz"),
    //     Qux<start, len> => puts("qux"),
    // }
}

pub fn sin_cos(n: u8): (u8, u8) {
    return (std::math::sin(n), std::math::cos(n));
}

struct String<T, S> impl Display {
    ptr: *mut u8,
    capactity: u16,
    len: u16,

    pub fn new(): String {
        // Alloc a single slot for 
        let ptr: *mut u8 = alloc::malloc(1);
        return String {
            ptr = ptr,
            capacity = 1,
            len = 0,
        };
    }

    pub fn from(s: str): String {
        let ptr: *mut u8 = alloc::malloc(s.len());
        return String {
            ptr = ptr,
            capacity = s.len()
        };
    }

    pub fn map_chars(*self, op: fn(u8): u8): void {
        for (let mut i: u8 = 0; i < self.len; i += 1;) {
            self.ptr[i] = op(self.ptr[i]);
        }
    }

    pub fn display(*self, writer: *mut Writer): void
        impl Display::display
    {
        writer.write(self.ptr, len);
    }
}
